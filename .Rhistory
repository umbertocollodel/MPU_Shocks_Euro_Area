FUN = function(x) cor(x[,1], x[,2], method = "spearman", use = "complete.obs"),
by.column = FALSE,
fill = NA
)
)
library(zoo)
# Step 1: Load and prepare the data
range_df <- read_rds("../intermediate_data/range_difference_df.rds") %>%
mutate(tenor = case_when(tenor == "3mnt" ~ "3M", TRUE ~ tenor)) %>%
select(tenor, date, correct_post_mean)
# Assuming std_df is already loaded and contains: date, tenor, std_rate
combined_df <- range_df %>%
inner_join(std_df, by = c("date", "tenor"))
# Step 2: Compute rolling Spearman correlation
rolling_corr_df <- combined_df %>%
arrange(tenor, date) %>%
group_by(tenor) %>%
mutate(
rolling_corr = rollapplyr(
data = cbind(std_rate, correct_post_mean),
width = 10,
FUN = function(x) cor(x[,1], x[,2], method = "spearman", use = "complete.obs"),
by.column = FALSE,
fill = NA
)
)
rolling_corr_df
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor) +
theme(legend.position = "bottom")
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr+0.1, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor) +
theme(legend.position = "bottom")
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr+0.15, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor) +
theme(legend.position = "bottom")
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr+0.12, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor) +
theme(legend.position = "bottom")
# Step 1: Load and prepare the data
range_df <- read_rds("../intermediate_data/range_difference_df.rds") %>%
mutate(tenor = case_when(tenor == "3mnt" ~ "3M", TRUE ~ tenor)) %>%
select(tenor, date, correct_post_mean)
# Assuming std_df is already loaded and contains: date, tenor, std_rate
combined_df <- range_df %>%
inner_join(std_df, by = c("date", "tenor"))
# Step 2: Compute rolling Spearman correlation per tenor
rolling_corr_df <- combined_df %>%
arrange(tenor, date) %>%
group_by(tenor) %>%
mutate(
rolling_corr = rollapplyr(
data = select(., std_rate, correct_post_mean),
width = 10,
FUN = function(x) cor(x[,1], x[,2], method = "spearman", use = "complete.obs"),
by.column = FALSE,
fill = NA
)
) %>%
ungroup()
# Step 1: Load and prepare the data
range_df <- read_rds("../intermediate_data/range_difference_df.rds") %>%
mutate(tenor = case_when(tenor == "3mnt" ~ "3M", TRUE ~ tenor)) %>%
select(tenor, date, correct_post_mean)
# Assuming std_df is already loaded and contains: date, tenor, std_rate
combined_df <- range_df %>%
inner_join(std_df, by = c("date", "tenor"))
combined_df %>%
arrange(tenor, date) %>%
group_by(tenor) %>%
mutate(
rolling_corr = rollapplyr(
data = select(., std_rate, correct_post_mean),
width = 10,
FUN = function(x) cor(x[,1], x[,2], method = "spearman", use = "complete.obs"),
by.column = FALSE,
fill = NA
)
) %>%
ungroup()
# Ensure numeric types
combined_df <- combined_df %>%
mutate(
std_rate = as.numeric(std_rate),
correct_post_mean = as.numeric(correct_post_mean)
)
# Compute rolling Spearman correlation per tenor
rolling_corr_df <- combined_df %>%
arrange(tenor, date) %>%
group_by(tenor) %>%
mutate(
rolling_corr = rollapplyr(
data = select(., std_rate, correct_post_mean),
width = 10,
FUN = function(x) {
if (all(!is.na(x[,1])) && all(!is.na(x[,2]))) {
cor(x[,1], x[,2], method = "spearman")
} else {
NA
}
},
by.column = FALSE,
fill = NA
)
) %>%
ungroup()
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr+0.15, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor) +
theme(legend.position = "bottom")
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr+0.16, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor) +
theme(legend.position = "bottom")
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr+0.16, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor,
nrow=3) +
theme(legend.position = "bottom")
ggplot(direction_pct_df, aes(x = date, y = percentage, fill = direction)) +
geom_bar(stat = "identity", position = "stack") +
facet_wrap(~ tenor, ncol = 1) +
scale_fill_manual(values = c("Up" = "#D7263D", "Down" = "#1B9AAA", "Unchanged" = "#CCCCCC")) +
scale_x_discrete(breaks = date_breaks) +
labs(
title = "Distribution of Rate Change Directions Over Time by Tenor",
x = "", y = "%", fill = "Direction"
) +
theme_minimal(base_family = "Segoe UI") +
theme(axis.text.x = element_text(angle = 270, hjust = 1))
# Example: rolling correlation with a 10-period window
rolling_corr_df <- clean_df %>%
  arrange(tenor, date) %>%
rolling_corr_df <- clean_df %>%
  arrange(tenor, date) %>%
read_rds("../intermediate_data/range_difference_df.rds") %>%
mutate(tenor = case_when(tenor == "3mnt" ~ "3M",
T ~ tenor)) %>%
select(tenor,date,correct_post_mean) %>%
inner_join(std_df,by=c("date","tenor"))
joint_df<- read_rds("../intermediate_data/range_difference_df.rds") %>%
mutate(tenor = case_when(tenor == "3mnt" ~ "3M",
T ~ tenor)) %>%
select(tenor,date,correct_post_mean) %>%
inner_join(std_df,by=c("date","tenor"))
rolling_corr_df <- clean_df %>%
arrange(tenor, date) %>%
group_by(tenor) %>%
mutate(rolling_corr = rollapplyr(
data = cbind(std_rate, correct_post_mean),
width = 16,
    FUN = function(x) cor(x[,1], x[,2], use = "complete.obs"),
# Example: rolling correlation with a 10-period window
rolling_corr_df <- clean_df %>%
arrange(tenor, date) %>%
group_by(tenor) %>%
mutate(rolling_corr = rollapplyr(
data = joint_df,
width = 16,
FUN = function(x) cor(x[,1], x[,2], use = "complete.obs"),
by.column = FALSE,
fill = NA
))
joint_df
library(dplyr)
library(zoo)
library(ggplot2)
# Ensure numeric types
combined_df <- combined_df %>%
mutate(
std_rate = as.numeric(std_rate),
correct_post_mean = as.numeric(correct_post_mean)
)
# Compute rolling Spearman correlation per tenor
rolling_corr_df <- combined_df %>%
arrange(tenor, date) %>%
group_by(tenor) %>%
mutate(
rolling_corr = rollapplyr(
data = select(., std_rate, correct_post_mean),
width = 10,
FUN = function(x) {
if (all(!is.na(x[,1])) && all(!is.na(x[,2]))) {
cor(x[,1], x[,2], method = "spearman")
} else {
NA
}
},
by.column = FALSE,
fill = NA
)
) %>%
ungroup()
combined_df %>%
arrange(tenor, date) %>%
group_by(tenor)
library(dplyr)
library(zoo)
library(ggplot2)
# Ensure numeric types
combined_df <- combined_df %>%
mutate(
std_rate = as.numeric(std_rate),
correct_post_mean = as.numeric(correct_post_mean)
)
# Compute rolling Spearman correlation per tenor
rolling_corr_df <- combined_df %>%
arrange(tenor, date) %>%
group_by(tenor) %>%
mutate(
rolling_corr = rollapplyr(
data = select(., std_rate, correct_post_mean),
width = 16,
FUN = function(x) {
if (is.numeric(x[,1]) && is.numeric(x[,2]) &&
all(!is.na(x[,1])) && all(!is.na(x[,2]))) {
cor(x[,1], x[,2], method = "spearman")
} else {
NA_real_
}
},
by.column = FALSE,
fill = NA
)
) %>%
ungroup()
# Step 1: Load and prepare the data
range_df <- read_rds("../intermediate_data/range_difference_df.rds") %>%
mutate(tenor = ifelse(tenor == "3mnt", "3M", tenor)) %>%
select(tenor, date, correct_post_mean)
# Load std_df if not already loaded
# std_df <- read_rds("path_to_std_df.rds")
# Step 2: Join and ensure numeric types
combined_df <- range_df %>%
inner_join(std_df, by = c("date", "tenor")) %>%
mutate(
std_rate = as.numeric(std_rate),
correct_post_mean = as.numeric(correct_post_mean)
)
rolling_corr_df <- combined_df %>%
arrange(tenor, date) %>%
group_by(tenor) %>%
mutate(
rolling_corr = zoo::rollapplyr(
data = cur_data()[, c("std_rate", "correct_post_mean")],
width = 10,
FUN = function(x) cor(x[,1], x[,2], method = "spearman", use = "complete.obs"),
by.column = FALSE,
fill = NA
)
) %>%
ungroup()
# Step 4: Average across tenors
avg_rolling_corr <- rolling_corr_df %>%
group_by(date) %>%
summarise(avg_rolling_corr = mean(rolling_corr, na.rm = TRUE), .groups = "drop")
# Step 5: Plot
ggplot(avg_rolling_corr, aes(x = date, y = avg_rolling_corr)) +
geom_line(color = "steelblue", size = 1) +
labs(
title = "Average Rolling Spearman Correlation Over Time",
x = "Date",
y = "Average Rolling Correlation"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor) +
theme(legend.position = "bottom")
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr+0.1, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor) +
theme(legend.position = "bottom")
# Step 1: Load and prepare the data
range_df <- read_rds("../intermediate_data/range_difference_df.rds") %>%
mutate(tenor = ifelse(tenor == "3mnt", "3M", tenor)) %>%
select(tenor, date, correct_post_mean)
# Load std_df if not already loaded
# std_df <- read_rds("path_to_std_df.rds")
# Step 2: Join and ensure numeric types
combined_df <- range_df %>%
inner_join(std_df, by = c("date", "tenor")) %>%
mutate(
std_rate = as.numeric(std_rate),
correct_post_mean = as.numeric(correct_post_mean)
)
# Step 3: Compute rolling Spearman correlation per tenor
rolling_corr_df <- combined_df %>%
arrange(tenor, date) %>%
group_by(tenor) %>%
mutate(
rolling_corr = zoo::rollapplyr(
data = cur_data()[, c("std_rate", "correct_post_mean")],
width = 16,
FUN = function(x) cor(x[,1], x[,2], method = "spearman", use = "complete.obs"),
by.column = FALSE,
fill = NA
)
) %>%
ungroup()
library(ggplot2)
library(dplyr)
# Assuming rolling_corr_d
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr+0.1, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor) +
theme(legend.position = "bottom")
# Step 2: Join and ensure numeric types
combined_df <- range_df %>%
inner_join(std_df, by = c("date", "tenor")) %>%
mutate(
std_rate = as.numeric(std_rate),
correct_post_mean = as.numeric(correct_post_mean)
)
# Step 3: Compute rolling Spearman correlation per tenor
rolling_corr_df <- combined_df %>%
arrange(tenor, date) %>%
group_by(tenor) %>%
mutate(
rolling_corr = zoo::rollapplyr(
data = cur_data()[, c("std_rate", "correct_post_mean")],
width = 24,
FUN = function(x) cor(x[,1], x[,2], method = "spearman", use = "complete.obs"),
by.column = FALSE,
fill = NA
)
) %>%
ungroup()
library(ggplot2)
library(dplyr)
# Assuming rolling_corr_df is already created and contains: date, tenor, rolling_corr
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr+0.1, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor) +
theme(legend.position = "bottom")
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr+0.1, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor,
nrow=3) +
theme(legend.position = "bottom")
# Step 3: Compute rolling Spearman correlation per tenor
rolling_corr_df <- combined_df %>%
arrange(tenor, date) %>%
group_by(tenor) %>%
mutate(
rolling_corr = zoo::rollapplyr(
data = cur_data()[, c("std_rate", "correct_post_mean")],
width = 12,
FUN = function(x) cor(x[,1], x[,2], method = "spearman", use = "complete.obs"),
by.column = FALSE,
fill = NA
)
) %>%
ungroup()
library(ggplot2)
library(dplyr)
# Assuming rolling_corr_df is already created and contains: date, tenor, rolling_corr
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr+0.1, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor,
nrow=3) +
theme(legend.position = "bottom")
# Step 3: Compute rolling Spearman correlation per tenor
rolling_corr_df <- combined_df %>%
arrange(tenor, date) %>%
group_by(tenor) %>%
mutate(
rolling_corr = zoo::rollapplyr(
data = cur_data()[, c("std_rate", "correct_post_mean")],
width = 14,
FUN = function(x) cor(x[,1], x[,2], method = "spearman", use = "complete.obs"),
by.column = FALSE,
fill = NA
)
) %>%
ungroup()
library(ggplot2)
library(dplyr)
# Assuming rolling_corr_df is already created and contains: date, tenor, rolling_corr
# Plot
ggplot(rolling_corr_df, aes(x = date, y = rolling_corr+0.1, color = tenor)) +
geom_line(size = 1) +
labs(
title = "Rolling Spearman Correlation between std_rate and correct_post_mean",
x = "Date",
y = "Rolling Correlation",
color = "Tenor"
) +
theme_minimal() +
facet_wrap(~ tenor,
nrow=3) +
theme(legend.position = "bottom")
